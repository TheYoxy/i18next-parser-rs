name: Tag version

on:
  workflow_dispatch:
  push:
    tags:
      - "*.*.*"

jobs:
  bump_version:
    runs-on: ubuntu-latest
    outputs:
      release_body: ${{ steps.i18next-parser.outputs.content }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Generate a changelog
        uses: orhun/git-cliff-action@v3
        id: i18next-parser
        with:
          config: cliff.toml
          args: --verbose --latest --no-exec
        env:
          OUTPUT: CHANGELOG.md
          GITHUB_REPO: ${{ github.repository }}
  release:
    name: release ${{ matrix.build.name }}
    needs: bump_version
    runs-on: ${{ matrix.build.os }}
    strategy:
      fail-fast: false
      matrix:
        build:
          - {
              NAME: linux-x64-glibc,
              OS: ubuntu-22.04,
              TOOLCHAIN: nightly,
              TARGET: x86_64-unknown-linux-gnu,
            }
          - {
              NAME: linux-x64-musl,
              OS: ubuntu-22.04,
              TOOLCHAIN: nightly,
              TARGET: x86_64-unknown-linux-musl,
            }
          - {
              NAME: linux-x86-glibc,
              OS: ubuntu-22.04,
              TOOLCHAIN: nightly,
              TARGET: i686-unknown-linux-gnu,
            }
          - {
              NAME: linux-x86-musl,
              OS: ubuntu-22.04,
              TOOLCHAIN: nightly,
              TARGET: i686-unknown-linux-musl,
            }
          - {
              NAME: linux-arm64-glibc,
              OS: ubuntu-22.04,
              TOOLCHAIN: nightly,
              TARGET: aarch64-unknown-linux-gnu,
            }
          - {
              NAME: linux-arm64-musl,
              OS: ubuntu-22.04,
              TOOLCHAIN: nightly,
              TARGET: aarch64-unknown-linux-musl,
            }
          - {
              NAME: win32-x64-mingw,
              OS: windows-2022,
              TOOLCHAIN: nightly,
              TARGET: x86_64-pc-windows-gnu,
            }
          - {
              NAME: win32-x64-msvc,
              OS: windows-2022,
              TOOLCHAIN: nightly,
              TARGET: x86_64-pc-windows-msvc,
            }
          - {
              NAME: win32-x86-msvc,
              OS: windows-2022,
              TOOLCHAIN: nightly,
              TARGET: i686-pc-windows-msvc,
            }
          - {
              NAME: win32-arm64-msvc,
              OS: windows-2022,
              TOOLCHAIN: nightly,
              TARGET: aarch64-pc-windows-msvc,
            }
          - {
              NAME: darwin-x64,
              OS: macos-14,
              TOOLCHAIN: nightly,
              TARGET: x86_64-apple-darwin,
            }
          - {
              NAME: darwin-arm64,
              OS: macos-14,
              TOOLCHAIN: nightly,
              TARGET: aarch64-apple-darwin,
            }
    steps:
      - uses: actions/checkout@master
      - name: Set the release version
        shell: bash
        run: echo "RELEASE_VERSION=${GITHUB_REF:11}" >> $GITHUB_ENV
      - name: Install dependencies
        shell: bash
        run: |
          if [[ "${{ matrix.build.NAME }}" = *"-musl" ]]; then
            sudo apt-get update
            sudo apt-get install -y --no-install-recommends \
              --allow-unauthenticated musl-tools
          fi
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.build.TOOLCHAIN }}
          target: ${{ matrix.build.TARGET }}
          override: true
      - name: Build (linux/macos)
        if: matrix.build.OS != 'windows-2022'
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --release --locked --target ${{ matrix.build.TARGET }}
      - name: Build (windows)
        if: matrix.build.OS == 'windows-2022'
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --locked --target ${{ matrix.build.TARGET }}
      - name: Prepare release assets
        shell: bash
        run: |
          mkdir -p release/
          cp {LICENSE.md,README.md,CHANGELOG.md} release/
          for bin in 'i18next-parser'; do
            if [ "${{ matrix.build.OS }}" = "windows-2022" ]; then
              bin="${bin}.exe"
            fi
            cp "target/${{ matrix.build.TARGET }}/release/${bin}" release/
          done
          mv release/ i18next-parser-${{ env.RELEASE_VERSION }}/
      - name: Create release artifacts
        shell: bash
        run: |
          if [ "${{ matrix.build.OS }}" = "windows-2022" ]; then
            7z a -tzip "i18next-parser-${{ env.RELEASE_VERSION }}-${{ matrix.build.TARGET }}.zip" \
              i18next-parser-${{ env.RELEASE_VERSION }}/
          else
            tar -czvf i18next-parser-${{ env.RELEASE_VERSION }}-${{ matrix.build.TARGET }}.tar.gz \
              i18next-parser-${{ env.RELEASE_VERSION }}/
            shasum -a 512 i18next-parser-${{ env.RELEASE_VERSION }}-${{ matrix.build.TARGET }}.tar.gz \
              > i18next-parser-${{ env.RELEASE_VERSION }}-${{ matrix.build.TARGET }}.tar.gz.sha512
          fi
      - name: Publish to GitHub
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: i18next-parser-${{ env.RELEASE_VERSION }}-${{ matrix.build.TARGET }}*
          file_glob: true
          overwrite: true
          tag: ${{ github.ref }}
          release_name: "${{ env.RELEASE_VERSION }}"
          body: "${{ needs.bump_version.outputs.release_body }}"
